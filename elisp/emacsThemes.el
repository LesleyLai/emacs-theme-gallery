(setThemeAndTakeScreenshots)

(defun setThemeAndTakeScreenshots ()
  (let ((themes '((adwaita nil "native")
		  (afternoon t "https://github.com/osener/emacs-afternoon-theme")
		  (ample t "https://github.com/jordonbiondo/ample-theme")
		  (ample-light nil "https://github.com/jordonbiondo/ample-theme")
		  (ample-zen t "https://github.com/mjwall/ample-zen")
		  (anti-zenburn nil "https://github.com/m00natic/anti-zenburn-theme")
		  (badger t "https://github.com/ccann/badger-theme")
		  (bubbleberry t "https://github.com/jasonm23/emacs-bubbleberry-theme")
		  (busybee t "https://github.com/mswift42/busybee-theme")
		  (cyberpunk t "https://github.com/n3mo/cyberpunk-theme.el")
		  (deeper-blue t "native")
		  (dichromacy nil "native")
		  (distinguished t "https://github.com/Lokaltog/distinguished-theme")
		  (espresso nil  "https://github.com/dgutov/espresso-theme")
		  (flatland t "https://github.com/gchp/flatland-emacs")
		  (light-blue nil "native")
		  (manoj-dark t "native")
		  (misterioso t "native")
		  (monokai t "https://github.com/oneKelvinSmith/monokai-emacs")
		  (solarized-dark t "https://github.com/bbatsov/solarized-emacs")
		  (solarized-light nil "https://github.com/bbatsov/solarized-emacs")
		  (tango nil "native")
		  (tango-dark t "native")
		  (tsdh-dark t "native")
		  (tsdh-light nil "native")
		  (wheatgrass t "native")
		  (whiteboard nil "native")
		  (wombat t "native")
		  (zenburn t "https://github.com/bbatsov/zenburn-emacs"))))

    (with-temp-buffer 
      (insert "var emacsThemesGallery = {};\n")
      (insert "emacsThemesGallery.themeProperties = {};\n")
      (insert "emacsThemesGallery.themeProperties.themes = [\n")
      (dolist (theme themes)

	(save-current-buffer
	  (takeThemeScreenshots (symbol-name (car theme)) (if (nth 1 theme) "dark" "light")))
	(insert (concat "{ name: '" (symbol-name (car theme))
			"', dark: " (if (nth 1 theme) "true" "false")
			", location: '" (nth 2 theme) "' },\n")))
      (delete-char -2)
      (insert "\n];")
      (write-region nil nil "../scripts/themeProperties.js"))))

(defun takeThemeScreenshots (themeName color)
  "Creates screenshots for current theme"
  (let* ((screenShotDir (concat "../screenshots/" color))
	 (screenShotThemeDir (concat screenShotDir "/" themeName "/"))
	 (sourceFilesAbsolute (directory-files "../languageTemplates" t))
	 (scrotCommand (concat "scrot -q 100 -u " screenShotThemeDir)))

    (unless (file-exists-p screenShotDir)
      (make-directory screenShotDir))
    (unless (file-exists-p screenShotThemeDir)
      (load-theme (car theme) t)
      (make-directory screenShotThemeDir)
      (dolist (sourceFileAbsolute sourceFilesAbsolute)
	(let* ((sourceFileExtension (file-name-extension sourceFileAbsolute))
	       (screenShotName (concat sourceFileExtension ".png"))
	       (takeScreenshot (concat scrotCommand screenShotName))
	       (pathToScreenshot (concat screenShotThemeDir screenShotName)))
	  (find-file sourceFileAbsolute)
	  (sit-for 1.5)
	  (shell-command takeScreenshot)
	  (shell-command (concat "convert -crop 316x209+0+21 " pathToScreenshot " " pathToScreenshot))
	  (sit-for 1)))
      (disable-theme (car theme)))))
