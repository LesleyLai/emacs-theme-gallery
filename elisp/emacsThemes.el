(setThemeAndTakeScreenshots)

(defun setThemeAndTakeScreenshots ()
  (let ((themes '((ample-light . nil)
		 (ample . t)   
		 (monokai . t)
		 (zenburn . t)
		 (adwaita . nil)
		 (deeper-blue . t)
		 (dichromacy . nil)
		 (light-blue . nil)
		 (manoj-dark . t)
		 (misterioso . t)
		 (tango-dark . t)
		 (tango . nil)
		 (tsdh-dark . t)
		 (tsdh-light . nil)
		 (wheatgrass . t)
		 (whiteboard . nil)
		 (wombat . t))))

    (dolist (theme themes)
      (load-theme (car theme) t)
      (takeThemeScreenshots (symbol-name (car theme)) (if (cdr theme) "dark" "light"))
      (disable-theme (car theme)))))

(defun takeThemeScreenshots (themeName color)
  "Creates screenshots for current theme"
  (let* ((screenShotDir (concat "~/text/javascript/projects/emacsThemes/screenshots/" color))
	 (screenShotThemeDir (concat screenShotDir "/" themeName "/"))
	 (sourceFilesAbsolute (directory-files "~/text/javascript/projects/emacsThemes/languageTemplates" t))
	 (scrotCommand (concat "scrot -q 100 -u " screenShotThemeDir)))

    (unless (file-exists-p screenShotDir)
      (make-directory screenShotDir))
    (make-directory screenShotThemeDir)
    (dolist (sourceFileAbsolute sourceFilesAbsolute)
      (let* ((sourceFileExtension (file-name-extension sourceFileAbsolute))
	     (screenShotName (concat sourceFileExtension ".png"))
	     (takeScreenshot (concat scrotCommand screenShotName))
	     (pathToScreenshot (concat screenShotThemeDir screenShotName)))
	(find-file sourceFileAbsolute)
	(sit-for 1)
	(shell-command takeScreenshot)
	(shell-command (concat "convert -crop 316x209+0+21 " pathToScreenshot " " pathToScreenshot))))))
